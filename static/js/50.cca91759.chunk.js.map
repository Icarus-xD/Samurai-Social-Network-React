{"version":3,"file":"static/js/50.cca91759.chunk.js","mappings":"0PAKMA,GAAcC,EAAAA,EAAAA,GAAU,IA6C9B,GAAeC,EAAAA,EAAAA,GAAU,CAACC,KAAM,SAAhC,EA3CkB,SAAAC,GAChB,OACE,kBAAMC,SAAUD,EAAME,aAAtB,WACE,SAACC,EAAA,EAAD,CACEC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAAUX,GACrBY,KAAK,OACLC,KAAK,QACLC,YAAY,WAEd,SAACP,EAAA,EAAD,CACEC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,GACXC,KAAK,WACLC,KAAK,WACLC,YAAY,aAGZV,EAAMW,aACN,4BACE,gBAAKC,IAAKZ,EAAMW,cAChB,SAACR,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAOC,SAAU,CAACC,EAAAA,GAAWC,KAAK,OAAOC,KAAK,UAAUC,YAAY,gCAG1F,SAACP,EAAA,EAAD,CACEC,UAAWC,EAAAA,EACXQ,GAAG,aACHL,KAAK,WACLC,KAAK,gBAEP,SAACN,EAAA,EAAD,CACEC,UAAU,QACVU,QAAQ,aACRL,KAAK,kBAHP,yBAOCT,EAAMe,QAAS,gBAAKC,UAAWC,EAAAA,EAAAA,iBAAhB,SAA0CjB,EAAMe,SAChE,mBAAQG,UAAU,EAAlB,0BChBN,GAAeC,EAAAA,EAAAA,KANS,SAAAC,GAAK,MAAK,CAChCC,OAAQD,EAAME,KAAKD,OACnBE,OAAQH,EAAME,KAAKC,OACnBZ,WAAYS,EAAME,KAAKX,cAGe,CACtCa,MAAOC,EAAAA,IADT,EAxBc,SAAAzB,GAMZ,OAAIA,EAAMuB,QACD,SAAC,KAAD,CAAUG,GAAE,mBAAc1B,EAAMqB,WAIvC,iCACE,mCACA,SAAC,EAAD,CAAWV,WAAYX,EAAMW,WAAYV,SAX5B,SAAA0B,GACf3B,EAAMwB,MAAMG,EAAKC,MAAOD,EAAKE,SAAUF,EAAKG,WAAYH,EAAKI,mB,+KCN3DC,EAAc,SAAC,GAA4B,EAA3BC,MAA4B,IAArBC,EAAoB,EAApBA,KAASlC,GAAW,YACzCmC,EAAWD,EAAKnB,OAASmB,EAAKE,QAEpC,OACE,iBAAKpB,UAAS,UAAKC,EAAAA,EAAAA,YAAL,YAA2BkB,EAAWlB,EAAAA,EAAAA,MAAe,IAAnE,UACGjB,EAAMqC,SACNF,IAAY,0BAAOD,EAAKnB,YAKlBuB,EAAW,SAAAtC,GACtB,IAAOiC,EAA6BjC,EAA7BiC,MAAgBM,GAAavC,EAAtBkC,MAAd,OAAoClC,EAApC,IACA,OACE,SAACgC,GAAD,kBAAiBhC,GAAjB,cACE,uCAAciC,GAAWM,QAKlBlC,EAAQ,SAAAL,GACnB,IAAOiC,EAA6BjC,EAA7BiC,MAAgBM,GAAavC,EAAtBkC,MAAd,OAAoClC,EAApC,IACA,OACE,SAACgC,GAAD,kBAAiBhC,GAAjB,cACE,oCAAWiC,GAAWM,S,4EC1BrB,IAAMhC,EAAW,SAAAiC,GACtB,IAAIA,EAGJ,MAAO,qBAGI3C,EAAY,SAAAA,GAAS,OAAI,SAAA2C,GACpC,GAAIA,EAAMC,OAAS5C,EACjB,MAAM,kBAAN,OAAyBA,EAAzB,kB,mBCRJ,KAAgB,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB","sources":["components/Login/LoginForm.jsx","components/Login/Login.jsx","components/common/FormsControl/FormsControl.jsx","utils/fieldValidators/validators.js","webpack://samurai-app-1/./src/components/common/FormsControl/FormsControl.module.css?07ef"],"sourcesContent":["import { reduxForm, Field } from \"redux-form\";\r\nimport { maxLength, required } from \"../../utils/fieldValidators/validators\";\r\nimport { Input } from \"../common/FormsControl/FormsControl\";\r\nimport styles from '../common/FormsControl/FormsControl.module.css';\r\n\r\nconst maxLength30 = maxLength(30);\r\n\r\nconst LoginForm = props => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field \r\n        component={Input}\r\n        validate={[required, maxLength30]} \r\n        type='text' \r\n        name='email' \r\n        placeholder='Email'\r\n      />\r\n      <Field \r\n        component={Input}\r\n        validate={[required]} \r\n        type='password' \r\n        name='password' \r\n        placeholder='Password'\r\n      />\r\n      {\r\n        props.captchaUrl &&\r\n        <div>\r\n          <img src={props.captchaUrl} />\r\n          <Field component={Input} validate={[required]} type='text' name='captcha' placeholder='Characters from Picture' />\r\n        </div>\r\n      }\r\n      <Field\r\n        component={Input}\r\n        id='remembered'\r\n        type='checkbox'\r\n        name='remembered'\r\n      />\r\n      <Field \r\n        component='label' \r\n        htmlFor='remembered' \r\n        name='rememberedLabel'\r\n      >\r\n        Remember Me\r\n      </Field>\r\n      {props.error && <div className={styles.formSummaryError}>{props.error}</div>}\r\n      <button disabled={false}>Log In</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm({form: 'login'})(LoginForm);","import { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { loginTC } from \"../../store/actionCreators\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nconst Login = props => {\r\n\r\n  const onSubmit = data => {\r\n    props.login(data.email, data.password, data.remembered, data.captcha);\r\n  };\r\n\r\n  if (props.isAuth) {\r\n    return <Navigate to={`/profile/${props.userId}`} />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2>Login</h2>\r\n      <LoginForm captchaUrl={props.captchaUrl} onSubmit={onSubmit} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  userId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n  captchaUrl: state.auth.captchaUrl,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  login: loginTC,\r\n})(Login);","import styles from './FormsControl.module.css';\r\n\r\nconst FormControl = ({input, meta, ...props}) => {\r\n  const hasError = meta.error && meta.touched;\r\n\r\n  return (\r\n    <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n      {props.children}\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea = props => {\r\n  const {input, meta, ...restProps} = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input = props => {\r\n  const {input, meta, ...restProps} = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps}/>\r\n    </FormControl>\r\n  );\r\n};","export const required = value => {\r\n  if (value) {\r\n    return;\r\n  }\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLength = maxLength => value => {\r\n  if (value.length > maxLength) {\r\n    return `Maximum length ${maxLength} characters`;\r\n  }\r\n  return;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControl_formControl__-hg20\",\"error\":\"FormsControl_error__Br7aE\",\"formSummaryError\":\"FormsControl_formSummaryError__8FZdP\"};"],"names":["maxLength30","maxLength","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Input","validate","required","type","name","placeholder","captchaUrl","src","id","htmlFor","error","className","styles","disabled","connect","state","userId","auth","isAuth","login","loginTC","to","data","email","password","remembered","captcha","FormControl","input","meta","hasError","touched","children","Textarea","restProps","value","length"],"sourceRoot":""}