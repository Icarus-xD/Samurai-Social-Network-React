{"version":3,"file":"static/js/259.3566b59a.chunk.js","mappings":"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","sources":["components/Profile/MyPosts/MakePostForm.jsx","webpack://samurai-app-1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-app-1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","webpack://samurai-app-1/./src/components/Profile/ProfileInfo/ProfileData.module.css?6c9a","components/Profile/ProfileInfo/ProfileInfoComponents/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfoComponents/ProfileContact.jsx","components/Profile/ProfileInfo/ProfileData.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/common/FormsControl/FormsControl.jsx","hoc/withAuthRedirect.jsx","utils/fieldValidators/validators.js","webpack://samurai-app-1/./src/components/common/FormsControl/FormsControl.module.css?07ef"],"sourcesContent":["import { Field, reduxForm } from 'redux-form';\r\nimport { maxLength, required } from '../../../utils/fieldValidators/validators';\r\nimport { Textarea } from '../../common/FormsControl/FormsControl';\r\n\r\nconst maxLength100 = maxLength(100);\r\n\r\n\r\nconst MakePostForm = props => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field \r\n        component={Textarea}\r\n        validate={[required, maxLength100]}\r\n        name='newPostBody' \r\n        placeholder='Make new post' \r\n      />\r\n      <button>Make Post</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm({form: 'MakePostForm'})(MakePostForm);","// extracted by mini-css-extract-plugin\nexport default {\"my-posts\":\"MyPosts_my-posts__WzXBO\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__O86xL\",\"user-picture\":\"Post_user-picture__s60Bk\",\"message\":\"Post_message__Lgefy\"};","import styles from './Post.module.css';\r\n\r\nconst Post = props => {\r\n  return (\r\n    <li className={styles.post}>\r\n      <img className={styles['user-picture']} src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQawNFgKqmtCVC3Vgn6yGMTelSNFOZsH_DRzQ&usqp=CAU' alt='profile picture' />\r\n      <p className={styles.message}>{props.message}</p>\r\n      <span>{props.likes} &lt;3</span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Post;","import MakePostForm from './MakePostForm';\r\nimport styles from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nconst MyPosts = props => {\r\n\r\n  const makePostHandler = values => {\r\n    props.onMakePost(values.newPostBody);\r\n  };\r\n\r\n  return (\r\n    <div className={styles['my-posts']}>\r\n      <div >\r\n        <h3>My Posts</h3>\r\n        <MakePostForm onSubmit={makePostHandler} />\r\n      </div>\r\n      <div>\r\n        <ul>\r\n          {props.posts.map(item => <Post key={item.id} message={item.body} likes={item.likes} />)}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPosts;","import { connect } from 'react-redux';\r\nimport MyPosts from './MyPosts';\r\nimport { makePostAC } from '../../../store/actionCreators';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    posts: state.profile.posts,\r\n    newPostText: state.profile.newPostText,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  onMakePost: makePostAC,\r\n})(MyPosts);","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileData_description__hgkcG\",\"profilePicture\":\"ProfileData_profilePicture__FArVL\"};","import { useEffect, useState } from \"react\";\r\n\r\nconst ProfileStatus = props => {\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const toggleEditMode = () => {\r\n    setEditMode(prevState => {\r\n      if (prevState) {\r\n        props.updateUserStatus(status);\r\n      }\r\n      return !prevState;\r\n    });\r\n  };\r\n\r\n  const onStatusChange = event => {\r\n    setStatus(event.target.value);\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      {\r\n        !editMode ? \r\n          <span onDoubleClick={toggleEditMode}><b>{status || 'Set Status'}</b></span> :\r\n          <input value={status} autoFocus={true} onChange={onStatusChange} onBlur={toggleEditMode} />\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatus;","const ProfileContact = props => {\r\n  return (\r\n    <li>\r\n      <b>{props.title}: </b>\r\n      {props.value || '-'}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ProfileContact;","import styles from './ProfileData.module.css';\r\nimport ProfileStatus from './ProfileInfoComponents/ProfileStatus';\r\nimport profilePicture from '../../../assets/img/profile-picture.jpg';\r\nimport ProfileContact from './ProfileInfoComponents/ProfileContact';\r\n\r\nconst ProfileData = props => {\r\n\r\n  const contacts = Object.keys(props.profile.contacts)\r\n    .filter(key => !!props.profile.contacts[key]);\r\n\r\n  const onProfilePictureSelected = event => {\r\n    if (event.target.files.length) {\r\n      props.setPhoto(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.description}>\r\n        <img src={props.profile.photos.large || profilePicture} className={styles.profilePicture} alt='avatar' />\r\n        {props.isOwner && <input type='file' onChange={onProfilePictureSelected} />}\r\n        <ProfileStatus status={props.status}  updateUserStatus={props.updateUserStatus} />\r\n        <div>\r\n          <b>Nickname: </b>\r\n          {props.profile.fullName}\r\n        </div>\r\n        <div>\r\n          <div>\r\n            <b>Looking for a Job: </b>\r\n            {props.profile.lookingForAJob ? 'Yes' : 'No'}\r\n          </div>\r\n          {\r\n            props.profile.lookingForAJob && \r\n            <div>\r\n              <b>Professional Skills: </b>\r\n              {props.profile.lookingForAJobDescription}\r\n            </div>\r\n          }\r\n        </div>\r\n        <div>\r\n          <b>About Me: </b>\r\n          {props.profile.aboutMe}\r\n        </div>\r\n        <div>\r\n          <b>Contacts: </b>\r\n          {contacts.length ?\r\n            <ul>\r\n              {\r\n                contacts\r\n                  .map(key => <ProfileContact key={key} title={key} value={props.profile.contacts[key]} />)\r\n              }\r\n            </ul> :\r\n            'No Contacts'\r\n          }\r\n        </div>\r\n        {props.isOwner && <button onClick={props.activateEditMode}>Edit Profile</button>}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ProfileData;","import { Field, reduxForm } from \"redux-form\";\r\nimport { Input, Textarea } from \"../../common/FormsControl/FormsControl\";\r\nimport styles from '../../common/FormsControl/FormsControl.module.css';\r\n\r\nconst ProfileDataForm = props => {\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n          <b>Nickname: </b>\r\n          <Field component={Input} name='fullName' type='text' placeholder='Enter New Nickname' />\r\n        </div>\r\n        <div>\r\n          <div>\r\n            <b>Looking for a Job: </b>\r\n            <Field component={Input} name='lookingForAJob' type='checkbox' />\r\n          </div>\r\n          <div>\r\n            <b>Professional Skills: </b>\r\n            <Field component={Textarea} name='lookingForAJobDescription' placeholder='Write about your professional skills' />\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <b>About Me: </b>\r\n          <Field component={Input} name='aboutMe' type='text' placeholder='Write about yourself' />\r\n        </div>\r\n        <div>\r\n          <b>Contacts: </b>\r\n            <ul>\r\n              {\r\n                Object.keys(props.contacts)\r\n                  .map(key => {\r\n                    return (\r\n                      <li key={key}>\r\n                        {key}\r\n                        <Field component={Input} name={`contacts.${key}`} type='text' placeholder={`Link to your ${key}`} />\r\n                      </li>\r\n                    );\r\n                  })\r\n              }\r\n            </ul>\r\n        </div>\r\n        {props.error && <div className={styles.formSummaryError}>{props.error}</div>}\r\n        <button>Finish Editing</button>\r\n      </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm({form: 'edit-profile'})(ProfileDataForm);","import { useState } from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileData from './ProfileData';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = props => {\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  if (!props.profile) {\r\n    return (\r\n      <Preloader />\r\n    );\r\n  }\r\n\r\n  const onSubmit = data => {\r\n    props.setProfileInfo(data)\r\n      .then(() => setEditMode(false));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {\r\n        !editMode ?\r\n          <ProfileData {...props} activateEditMode={() => setEditMode(true)} /> :\r\n          <ProfileDataForm contacts={props.profile.contacts} initialValues={props.profile} onSubmit={onSubmit} />\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;","import MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\n\r\nconst Profile = props => {\r\n  return (\r\n    <>\r\n      <ProfileInfo \r\n        isOwner={props.isOwner} \r\n        profile={props.profile} \r\n        status={props.status} \r\n        updateUserStatus={props.updateUserStatus} \r\n        setPhoto={props.setPhoto}\r\n        setProfileInfo={props.setProfileInfo}\r\n      />\r\n      <MyPostsContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;","import { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport { getUserStatusTC, setPhotoTC, setProfileTC,\r\n  updateUserStatusTC, setProfileInfoTC } from '../../store/actionCreators';\r\nimport withRouter from '../../hoc/withRouter';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nconst ProfileContainer = props => {\r\n\r\n  useEffect(() => {\r\n    const userId = props.router.params.userId || props.userId;\r\n    props.setUserProfile(userId);\r\n    props.getUserStatus(userId);\r\n  }, [props.router.params.userId]);\r\n\r\n  return (\r\n    <Profile \r\n      isOwner={!props.router.params.userId} \r\n      profile={props.profile} \r\n      status={props.status} \r\n      updateUserStatus={props.updateUserStatus} \r\n      setPhoto={props.setPhoto}\r\n      setProfileInfo={props.setProfileInfo}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  profile: state.profile.profile,\r\n  status: state.profile.status,\r\n  userId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default (\r\n  compose(\r\n    connect(mapStateToProps, { \r\n      setUserProfile: setProfileTC,\r\n      getUserStatus: getUserStatusTC,\r\n      updateUserStatus: updateUserStatusTC,\r\n      setPhoto: setPhotoTC,\r\n      setProfileInfo: setProfileInfoTC,\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect,\r\n  )(ProfileContainer)\r\n);","import styles from './FormsControl.module.css';\r\n\r\nconst FormControl = ({input, meta, ...props}) => {\r\n  const hasError = meta.error && meta.touched;\r\n\r\n  return (\r\n    <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n      {props.children}\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea = props => {\r\n  const {input, meta, ...restProps} = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input = props => {\r\n  const {input, meta, ...restProps} = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps}/>\r\n    </FormControl>\r\n  );\r\n};","import { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nconst withAuthRedirect = Component => {\r\n\r\n  const RedirectComponent = props => {\r\n\r\n    if (!props.isAuth) {\r\n      return <Navigate to='/login' />;\r\n    }\r\n  \r\n    return <Component {...props} />;\r\n  };\r\n\r\n  return connect(mapStateToProps, {})(RedirectComponent);\r\n};\r\n\r\nexport default withAuthRedirect;","export const required = value => {\r\n  if (value) {\r\n    return;\r\n  }\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLength = maxLength => value => {\r\n  if (value.length > maxLength) {\r\n    return `Maximum length ${maxLength} characters`;\r\n  }\r\n  return;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControl_formControl__-hg20\",\"error\":\"FormsControl_error__Br7aE\",\"formSummaryError\":\"FormsControl_formSummaryError__8FZdP\"};"],"names":["maxLength100","maxLength","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","validate","required","name","placeholder","className","styles","src","alt","message","likes","values","onMakePost","newPostBody","posts","map","item","body","id","connect","state","profile","newPostText","makePostAC","MyPosts","useState","editMode","setEditMode","status","setStatus","useEffect","toggleEditMode","prevState","updateUserStatus","value","autoFocus","onChange","event","target","onBlur","onDoubleClick","title","contacts","Object","keys","filter","key","photos","large","profilePicture","isOwner","type","files","length","setPhoto","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","onClick","activateEditMode","Input","error","Preloader","initialValues","data","setProfileInfo","then","MyPostsContainer","compose","userId","auth","isAuth","setUserProfile","setProfileTC","getUserStatus","getUserStatusTC","updateUserStatusTC","setPhotoTC","setProfileInfoTC","withRouter","withAuthRedirect","router","params","FormControl","input","meta","hasError","touched","children","restProps","mapStateToProps","Component","to"],"sourceRoot":""}